<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan
		base-package="bitcamp.pms">
		<context:exclude-filter type="regex"
			expression="bitcamp.pms.test.*" />
	</context:component-scan>
	<!-- Object builder = new SqlSessionFactoryBuilder(); iocDontainer.put("sqlSessionFactory"). -->
	<!-- <bean id="sqlSessionFactoryBuilder" -->
	<!-- class="org.apache.ibatis.session.SqlSessionFactoryBuilder"></bean> -->

	<!-- Object factory = sqlSessionFactoryBuilder.build(); -->
	<!-- iocContainer.put("sqlSessionFactory", factory); -->
	<!-- <bean id="sqlSessionFactory" -->
	<!-- factory-bean="sqlSessionFactoryBuilder" factory-method="build"> -->
	<!-- <constructor-arg ref="inputStream"></constructor-arg> -->
	<!-- </bean> -->

	<!-- Object obj = Resoytces.getResourceAsStream("bitcamp..."); -->
	<!-- iocContainer.put("inputStream", obj); -->
	<!-- <bean id="inputStream" class="org.apache.ibatis.io.Resources" -->
	<!-- factory-method="getResourceAsStream"> -->
	<!-- 생성자 메소드 생성할 때 넘겨줄 값이나 스테틱 메소드에 파라미터 전달 -->
	<!-- <constructor-arg -->
	<!-- value="bitcamp/pms/config/mybatis-config.xml"></constructor-arg> -->
	<!-- </bean> -->

	<!-- 공장에서 SqlSessionFactory 만든기 -->
	<!-- 주의! 클래스 속성에 지정된 클래스가 factoryBean 구현체라면, 그 객체를 만들어 저장하는 것이 아니라 그 객체의 
		getObject를 호출하여 그 리턴 값을 저장한다. -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath*:bitcamp/pms/sql/**/*.xml" />
		<property name="typeAliasesPackage"
			value="bitcamp.pms.domain"></property>
	</bean>

	<!-- dataSource를 스프링에서 다시 지정해야 한다. -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc_driver}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- DAO 인터페이스로 부터 구현체를 자동 생성하는 객체 등록 
        => DAO 구현체가 사용할 SQL 맵퍼 파일은 namespace 값으로 찾는다
        => 따라서 인터페이스 명과 SQL 맵퍼의 namespace 값은 같아야 한다.
        => 또한 인터페이스의 메서드명과 SQL id는 같아야 한다.
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="bitcamp.pms.dao" />
	</bean>

	<!-- .properties 파일을 읽어서 그 데이터를 보관할 객체를 등록한다 -->
	<context:property-placeholder
		location="bitcamp/pms/config/jdbc.properties" />
</beans>


